// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: productsqueries.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, description, owner_id, status)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, owner_id, status, created_at
`

type CreateProductParams struct {
	Name        string
	Description sql.NullString
	OwnerID     sql.NullInt32
	Status      sql.NullString
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.OwnerID,
		arg.Status,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProductByID = `-- name: DeleteProductByID :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProductByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProductByID, id)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, description, owner_id, status, created_at FROM products
WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getProductsByOwner = `-- name: GetProductsByOwner :many
SELECT id, name, description, owner_id, status, created_at FROM products
WHERE owner_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetProductsByOwner(ctx context.Context, ownerID sql.NullInt32) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductsByOwner, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.OwnerID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
