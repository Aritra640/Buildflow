// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: userquery.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, password , avatar_url)
VALUES ($1, $2, $3, $4)
RETURNING id, username, password, email, avatar_url, created_at, updated_at
`

type CreateUserParams struct {
	Username  string
	Email     string
	Password  string
	AvatarUrl sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserByEmail = `-- name: DeleteUserByEmail :exec
DELETE FROM users
WHERE email = $1
`

func (q *Queries) DeleteUserByEmail(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteUserByEmail, email)
	return err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, id)
	return err
}

const deleteUserByUsername = `-- name: DeleteUserByUsername :exec
DELETE FROM users
WHERE username = $1
`

func (q *Queries) DeleteUserByUsername(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUserByUsername, username)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, password, email, avatar_url, created_at, updated_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, password, email, avatar_url, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password, email, avatar_url, created_at, updated_at FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPasswordByID = `-- name: UpdateUserPasswordByID :exec
UPDATE users 
  set password = $2 
WHERE id = $1
`

type UpdateUserPasswordByIDParams struct {
	ID       int32
	Password string
}

func (q *Queries) UpdateUserPasswordByID(ctx context.Context, arg UpdateUserPasswordByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPasswordByID, arg.ID, arg.Password)
	return err
}

const updateUserPasswordByUsername = `-- name: UpdateUserPasswordByUsername :exec
UPDATE users 
  set password = $2 
WHERE username = $1
`

type UpdateUserPasswordByUsernameParams struct {
	Username string
	Password string
}

func (q *Queries) UpdateUserPasswordByUsername(ctx context.Context, arg UpdateUserPasswordByUsernameParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPasswordByUsername, arg.Username, arg.Password)
	return err
}

const updateUserUsernameByID = `-- name: UpdateUserUsernameByID :exec
UPDATE users 
  set username = $2 
WHERE id = $1
`

type UpdateUserUsernameByIDParams struct {
	ID       int32
	Username string
}

func (q *Queries) UpdateUserUsernameByID(ctx context.Context, arg UpdateUserUsernameByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateUserUsernameByID, arg.ID, arg.Username)
	return err
}
